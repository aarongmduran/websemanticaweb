{"ast":null,"code":"const {\n  isPlainObject\n} = require('../utils/utils');\n\nconst types = ['item', 'property', 'lexeme', 'form', 'sense'];\n\nmodule.exports = buildUrl => (search, language, limit, format, uselang) => {\n  // Using the variable 'offset' instead of 'continue' as the later is a reserved word\n  let type, offset; // polymorphism: arguments can be passed as an object keys\n\n  if (isPlainObject(search)) {\n    // Not using destructuring assigment there as it messes with both babel and standard\n    const params = search;\n    search = params.search;\n    language = params.language;\n    limit = params.limit;\n    offset = params.continue;\n    format = params.format;\n    uselang = params.uselang;\n    type = params.type;\n  }\n\n  if (!(search && search.length > 0)) throw new Error(\"search can't be empty\");\n  language = language || 'en';\n  uselang = uselang || language;\n  limit = limit || '20';\n  format = format || 'json';\n  type = type || 'item';\n  offset = offset || '0';\n  if (!types.includes(type)) throw new Error(`invalid type: ${type}`);\n  return buildUrl({\n    action: 'wbsearchentities',\n    search,\n    language,\n    limit,\n    continue: offset,\n    format,\n    uselang,\n    type\n  });\n};","map":{"version":3,"names":["isPlainObject","require","types","module","exports","buildUrl","search","language","limit","format","uselang","type","offset","params","continue","length","Error","includes","action"],"sources":["/Users/aarongmduran/Desktop/tornados/tornados/node_modules/wikibase-sdk/lib/queries/search_entities.js"],"sourcesContent":["const { isPlainObject } = require('../utils/utils')\nconst types = [ 'item', 'property', 'lexeme', 'form', 'sense' ]\n\nmodule.exports = buildUrl => (search, language, limit, format, uselang) => {\n  // Using the variable 'offset' instead of 'continue' as the later is a reserved word\n  let type, offset\n\n  // polymorphism: arguments can be passed as an object keys\n  if (isPlainObject(search)) {\n    // Not using destructuring assigment there as it messes with both babel and standard\n    const params = search\n    search = params.search\n    language = params.language\n    limit = params.limit\n    offset = params.continue\n    format = params.format\n    uselang = params.uselang\n    type = params.type\n  }\n\n  if (!(search && search.length > 0)) throw new Error(\"search can't be empty\")\n\n  language = language || 'en'\n  uselang = uselang || language\n  limit = limit || '20'\n  format = format || 'json'\n  type = type || 'item'\n  offset = offset || '0'\n\n  if (!types.includes(type)) throw new Error(`invalid type: ${type}`)\n\n  return buildUrl({\n    action: 'wbsearchentities',\n    search,\n    language,\n    limit,\n    continue: offset,\n    format,\n    uselang,\n    type\n  })\n}\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAoBC,OAAO,CAAC,gBAAD,CAAjC;;AACA,MAAMC,KAAK,GAAG,CAAE,MAAF,EAAU,UAAV,EAAsB,QAAtB,EAAgC,MAAhC,EAAwC,OAAxC,CAAd;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,IAAI,CAACC,MAAD,EAASC,QAAT,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCC,OAAlC,KAA8C;EACzE;EACA,IAAIC,IAAJ,EAAUC,MAAV,CAFyE,CAIzE;;EACA,IAAIZ,aAAa,CAACM,MAAD,CAAjB,EAA2B;IACzB;IACA,MAAMO,MAAM,GAAGP,MAAf;IACAA,MAAM,GAAGO,MAAM,CAACP,MAAhB;IACAC,QAAQ,GAAGM,MAAM,CAACN,QAAlB;IACAC,KAAK,GAAGK,MAAM,CAACL,KAAf;IACAI,MAAM,GAAGC,MAAM,CAACC,QAAhB;IACAL,MAAM,GAAGI,MAAM,CAACJ,MAAhB;IACAC,OAAO,GAAGG,MAAM,CAACH,OAAjB;IACAC,IAAI,GAAGE,MAAM,CAACF,IAAd;EACD;;EAED,IAAI,EAAEL,MAAM,IAAIA,MAAM,CAACS,MAAP,GAAgB,CAA5B,CAAJ,EAAoC,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;EAEpCT,QAAQ,GAAGA,QAAQ,IAAI,IAAvB;EACAG,OAAO,GAAGA,OAAO,IAAIH,QAArB;EACAC,KAAK,GAAGA,KAAK,IAAI,IAAjB;EACAC,MAAM,GAAGA,MAAM,IAAI,MAAnB;EACAE,IAAI,GAAGA,IAAI,IAAI,MAAf;EACAC,MAAM,GAAGA,MAAM,IAAI,GAAnB;EAEA,IAAI,CAACV,KAAK,CAACe,QAAN,CAAeN,IAAf,CAAL,EAA2B,MAAM,IAAIK,KAAJ,CAAW,iBAAgBL,IAAK,EAAhC,CAAN;EAE3B,OAAON,QAAQ,CAAC;IACda,MAAM,EAAE,kBADM;IAEdZ,MAFc;IAGdC,QAHc;IAIdC,KAJc;IAKdM,QAAQ,EAAEF,MALI;IAMdH,MANc;IAOdC,OAPc;IAQdC;EARc,CAAD,CAAf;AAUD,CAtCD"},"metadata":{},"sourceType":"script"}