{"ast":null,"code":"const {\n  forceArray\n} = require('../utils/utils');\n\nconst {\n  isItemId\n} = require('../helpers/helpers');\n\nconst validate = require('../helpers/validate'); // Fiter-out properties. Can't be filtered by\n// `?subject a wikibase:Item`, as those triples are omitted\n// https://www.mediawiki.org/wiki/Wikibase/Indexing/RDF_Dump_Format#WDQS_data_differences\n\n\nconst itemsOnly = 'FILTER NOT EXISTS { ?subject rdf:type wikibase:Property . } ';\n\nmodule.exports = sparqlEndpoint => {\n  const sparqlQuery = require('./sparql_query')(sparqlEndpoint);\n\n  return function (property, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      limit,\n      caseInsensitive,\n      keepProperties\n    } = options;\n    const valueFn = caseInsensitive ? caseInsensitiveValueQuery : directValueQuery;\n    const filter = keepProperties ? '' : itemsOnly; // Allow to request values for several properties at once\n\n    let properties = forceArray(property);\n    properties.forEach(validate.propertyId);\n    properties = properties.map(prefixifyProperty).join('|');\n    const valueBlock = getValueBlock(value, valueFn, properties, filter);\n    let sparql = `SELECT DISTINCT ?subject WHERE { ${valueBlock} }`;\n    if (limit) sparql += ` LIMIT ${limit}`;\n    return sparqlQuery(sparql);\n  };\n};\n\nconst getValueBlock = (value, valueFn, properties, filter) => {\n  if (!(value instanceof Array)) {\n    return valueFn(properties, getValueString(value), filter);\n  }\n\n  const valuesBlocks = value.map(getValueString).map(valStr => valueFn(properties, valStr, filter));\n  return '{ ' + valuesBlocks.join('} UNION {') + ' }';\n};\n\nconst getValueString = value => {\n  if (isItemId(value)) {\n    value = `wd:${value}`;\n  } else if (typeof value === 'string') {\n    value = `'${value}'`;\n  }\n\n  return value;\n};\n\nconst directValueQuery = (properties, value, filter, limit) => {\n  return `?subject ${properties} ${value} .\n    ${filter}`;\n}; // Discussion on how to make this query optimal:\n// http://stackoverflow.com/q/43073266/3324977\n\n\nconst caseInsensitiveValueQuery = (properties, value, filter, limit) => {\n  return `?subject ${properties} ?value .\n    FILTER (lcase(?value) = ${value.toLowerCase()})\n    ${filter}`;\n};\n\nconst prefixifyProperty = property => 'wdt:' + property;","map":{"version":3,"names":["forceArray","require","isItemId","validate","itemsOnly","module","exports","sparqlEndpoint","sparqlQuery","property","value","options","limit","caseInsensitive","keepProperties","valueFn","caseInsensitiveValueQuery","directValueQuery","filter","properties","forEach","propertyId","map","prefixifyProperty","join","valueBlock","getValueBlock","sparql","Array","getValueString","valuesBlocks","valStr","toLowerCase"],"sources":["/Users/aarongmduran/Desktop/tornados/tornados/node_modules/wikibase-sdk/lib/queries/get_reverse_claims.js"],"sourcesContent":["const { forceArray } = require('../utils/utils')\nconst { isItemId } = require('../helpers/helpers')\nconst validate = require('../helpers/validate')\n\n// Fiter-out properties. Can't be filtered by\n// `?subject a wikibase:Item`, as those triples are omitted\n// https://www.mediawiki.org/wiki/Wikibase/Indexing/RDF_Dump_Format#WDQS_data_differences\nconst itemsOnly = 'FILTER NOT EXISTS { ?subject rdf:type wikibase:Property . } '\n\nmodule.exports = sparqlEndpoint => {\n  const sparqlQuery = require('./sparql_query')(sparqlEndpoint)\n  return (property, value, options = {}) => {\n    const { limit, caseInsensitive, keepProperties } = options\n    const valueFn = caseInsensitive ? caseInsensitiveValueQuery : directValueQuery\n    const filter = keepProperties ? '' : itemsOnly\n\n    // Allow to request values for several properties at once\n    let properties = forceArray(property)\n    properties.forEach(validate.propertyId)\n    properties = properties.map(prefixifyProperty).join('|')\n\n    const valueBlock = getValueBlock(value, valueFn, properties, filter)\n    let sparql = `SELECT DISTINCT ?subject WHERE { ${valueBlock} }`\n    if (limit) sparql += ` LIMIT ${limit}`\n    return sparqlQuery(sparql)\n  }\n}\n\nconst getValueBlock = (value, valueFn, properties, filter) => {\n  if (!(value instanceof Array)) {\n    return valueFn(properties, getValueString(value), filter)\n  }\n\n  const valuesBlocks = value\n    .map(getValueString)\n    .map(valStr => valueFn(properties, valStr, filter))\n\n  return '{ ' + valuesBlocks.join('} UNION {') + ' }'\n}\n\nconst getValueString = value => {\n  if (isItemId(value)) {\n    value = `wd:${value}`\n  } else if (typeof value === 'string') {\n    value = `'${value}'`\n  }\n  return value\n}\n\nconst directValueQuery = (properties, value, filter, limit) => {\n  return `?subject ${properties} ${value} .\n    ${filter}`\n}\n\n// Discussion on how to make this query optimal:\n// http://stackoverflow.com/q/43073266/3324977\nconst caseInsensitiveValueQuery = (properties, value, filter, limit) => {\n  return `?subject ${properties} ?value .\n    FILTER (lcase(?value) = ${value.toLowerCase()})\n    ${filter}`\n}\n\nconst prefixifyProperty = property => 'wdt:' + property\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAiBC,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAM;EAAEC;AAAF,IAAeD,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,qBAAD,CAAxB,C,CAEA;AACA;AACA;;;AACA,MAAMG,SAAS,GAAG,8DAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,cAAc,IAAI;EACjC,MAAMC,WAAW,GAAGP,OAAO,CAAC,gBAAD,CAAP,CAA0BM,cAA1B,CAApB;;EACA,OAAO,UAACE,QAAD,EAAWC,KAAX,EAAmC;IAAA,IAAjBC,OAAiB,uEAAP,EAAO;IACxC,MAAM;MAAEC,KAAF;MAASC,eAAT;MAA0BC;IAA1B,IAA6CH,OAAnD;IACA,MAAMI,OAAO,GAAGF,eAAe,GAAGG,yBAAH,GAA+BC,gBAA9D;IACA,MAAMC,MAAM,GAAGJ,cAAc,GAAG,EAAH,GAAQV,SAArC,CAHwC,CAKxC;;IACA,IAAIe,UAAU,GAAGnB,UAAU,CAACS,QAAD,CAA3B;IACAU,UAAU,CAACC,OAAX,CAAmBjB,QAAQ,CAACkB,UAA5B;IACAF,UAAU,GAAGA,UAAU,CAACG,GAAX,CAAeC,iBAAf,EAAkCC,IAAlC,CAAuC,GAAvC,CAAb;IAEA,MAAMC,UAAU,GAAGC,aAAa,CAAChB,KAAD,EAAQK,OAAR,EAAiBI,UAAjB,EAA6BD,MAA7B,CAAhC;IACA,IAAIS,MAAM,GAAI,oCAAmCF,UAAW,IAA5D;IACA,IAAIb,KAAJ,EAAWe,MAAM,IAAK,UAASf,KAAM,EAA1B;IACX,OAAOJ,WAAW,CAACmB,MAAD,CAAlB;EACD,CAdD;AAeD,CAjBD;;AAmBA,MAAMD,aAAa,GAAG,CAAChB,KAAD,EAAQK,OAAR,EAAiBI,UAAjB,EAA6BD,MAA7B,KAAwC;EAC5D,IAAI,EAAER,KAAK,YAAYkB,KAAnB,CAAJ,EAA+B;IAC7B,OAAOb,OAAO,CAACI,UAAD,EAAaU,cAAc,CAACnB,KAAD,CAA3B,EAAoCQ,MAApC,CAAd;EACD;;EAED,MAAMY,YAAY,GAAGpB,KAAK,CACvBY,GADkB,CACdO,cADc,EAElBP,GAFkB,CAEdS,MAAM,IAAIhB,OAAO,CAACI,UAAD,EAAaY,MAAb,EAAqBb,MAArB,CAFH,CAArB;EAIA,OAAO,OAAOY,YAAY,CAACN,IAAb,CAAkB,WAAlB,CAAP,GAAwC,IAA/C;AACD,CAVD;;AAYA,MAAMK,cAAc,GAAGnB,KAAK,IAAI;EAC9B,IAAIR,QAAQ,CAACQ,KAAD,CAAZ,EAAqB;IACnBA,KAAK,GAAI,MAAKA,KAAM,EAApB;EACD,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IACpCA,KAAK,GAAI,IAAGA,KAAM,GAAlB;EACD;;EACD,OAAOA,KAAP;AACD,CAPD;;AASA,MAAMO,gBAAgB,GAAG,CAACE,UAAD,EAAaT,KAAb,EAAoBQ,MAApB,EAA4BN,KAA5B,KAAsC;EAC7D,OAAQ,YAAWO,UAAW,IAAGT,KAAM;AACzC,MAAMQ,MAAO,EADX;AAED,CAHD,C,CAKA;AACA;;;AACA,MAAMF,yBAAyB,GAAG,CAACG,UAAD,EAAaT,KAAb,EAAoBQ,MAApB,EAA4BN,KAA5B,KAAsC;EACtE,OAAQ,YAAWO,UAAW;AAChC,8BAA8BT,KAAK,CAACsB,WAAN,EAAoB;AAClD,MAAMd,MAAO,EAFX;AAGD,CAJD;;AAMA,MAAMK,iBAAiB,GAAGd,QAAQ,IAAI,SAASA,QAA/C"},"metadata":{},"sourceType":"script"}