{"ast":null,"code":"const {\n  isPlainObject,\n  forceArray,\n  shortLang\n} = require('../utils/utils');\n\nmodule.exports = buildUrl => (titles, sites, languages, props, format, redirects) => {\n  // polymorphism: arguments can be passed as an object keys\n  if (isPlainObject(titles)) {\n    // Not using destructuring assigment there as it messes with both babel and standard\n    const params = titles;\n    titles = params.titles;\n    sites = params.sites;\n    languages = params.languages;\n    props = params.props;\n    format = params.format;\n    redirects = params.redirects;\n  }\n\n  format = format || 'json'; // titles cant be let empty\n\n  if (!(titles && titles.length > 0)) throw new Error('no titles provided'); // default to the English Wikipedia\n\n  if (!(sites && sites.length > 0)) sites = ['enwiki']; // Properties can be either one property as a string\n  // or an array or properties;\n  // either case me just want to deal with arrays\n\n  titles = forceArray(titles);\n  sites = forceArray(sites).map(parseSite);\n  props = forceArray(props);\n  const query = {\n    action: 'wbgetentities',\n    titles: titles.join('|'),\n    sites: sites.join('|'),\n    format\n  }; // Normalizing only works if there is only one site and title\n\n  if (sites.length === 1 && titles.length === 1) {\n    query.normalize = true;\n  }\n\n  if (languages) {\n    languages = forceArray(languages).map(shortLang);\n    query.languages = languages.join('|');\n  }\n\n  if (props && props.length > 0) query.props = props.join('|');\n  if (redirects === false) query.redirects = 'no';\n  return buildUrl(query);\n}; // convert 2 letters language code to Wikipedia sitelinks code\n\n\nconst parseSite = site => site.length === 2 ? `${site}wiki` : site;","map":{"version":3,"names":["isPlainObject","forceArray","shortLang","require","module","exports","buildUrl","titles","sites","languages","props","format","redirects","params","length","Error","map","parseSite","query","action","join","normalize","site"],"sources":["/Users/aarongmduran/Desktop/tornados/tornados/node_modules/wikibase-sdk/lib/queries/get_entities_from_sitelinks.js"],"sourcesContent":["const { isPlainObject, forceArray, shortLang } = require('../utils/utils')\n\nmodule.exports = buildUrl => (titles, sites, languages, props, format, redirects) => {\n  // polymorphism: arguments can be passed as an object keys\n  if (isPlainObject(titles)) {\n    // Not using destructuring assigment there as it messes with both babel and standard\n    const params = titles\n    titles = params.titles\n    sites = params.sites\n    languages = params.languages\n    props = params.props\n    format = params.format\n    redirects = params.redirects\n  }\n\n  format = format || 'json'\n\n  // titles cant be let empty\n  if (!(titles && titles.length > 0)) throw new Error('no titles provided')\n  // default to the English Wikipedia\n  if (!(sites && sites.length > 0)) sites = [ 'enwiki' ]\n\n  // Properties can be either one property as a string\n  // or an array or properties;\n  // either case me just want to deal with arrays\n  titles = forceArray(titles)\n  sites = forceArray(sites).map(parseSite)\n  props = forceArray(props)\n\n  const query = {\n    action: 'wbgetentities',\n    titles: titles.join('|'),\n    sites: sites.join('|'),\n    format\n  }\n\n  // Normalizing only works if there is only one site and title\n  if (sites.length === 1 && titles.length === 1) {\n    query.normalize = true\n  }\n\n  if (languages) {\n    languages = forceArray(languages).map(shortLang)\n    query.languages = languages.join('|')\n  }\n\n  if (props && props.length > 0) query.props = props.join('|')\n\n  if (redirects === false) query.redirects = 'no'\n\n  return buildUrl(query)\n}\n\n// convert 2 letters language code to Wikipedia sitelinks code\nconst parseSite = site => site.length === 2 ? `${site}wiki` : site\n"],"mappings":"AAAA,MAAM;EAAEA,aAAF;EAAiBC,UAAjB;EAA6BC;AAA7B,IAA2CC,OAAO,CAAC,gBAAD,CAAxD;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,IAAI,CAACC,MAAD,EAASC,KAAT,EAAgBC,SAAhB,EAA2BC,KAA3B,EAAkCC,MAAlC,EAA0CC,SAA1C,KAAwD;EACnF;EACA,IAAIZ,aAAa,CAACO,MAAD,CAAjB,EAA2B;IACzB;IACA,MAAMM,MAAM,GAAGN,MAAf;IACAA,MAAM,GAAGM,MAAM,CAACN,MAAhB;IACAC,KAAK,GAAGK,MAAM,CAACL,KAAf;IACAC,SAAS,GAAGI,MAAM,CAACJ,SAAnB;IACAC,KAAK,GAAGG,MAAM,CAACH,KAAf;IACAC,MAAM,GAAGE,MAAM,CAACF,MAAhB;IACAC,SAAS,GAAGC,MAAM,CAACD,SAAnB;EACD;;EAEDD,MAAM,GAAGA,MAAM,IAAI,MAAnB,CAbmF,CAenF;;EACA,IAAI,EAAEJ,MAAM,IAAIA,MAAM,CAACO,MAAP,GAAgB,CAA5B,CAAJ,EAAoC,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN,CAhB+C,CAiBnF;;EACA,IAAI,EAAEP,KAAK,IAAIA,KAAK,CAACM,MAAN,GAAe,CAA1B,CAAJ,EAAkCN,KAAK,GAAG,CAAE,QAAF,CAAR,CAlBiD,CAoBnF;EACA;EACA;;EACAD,MAAM,GAAGN,UAAU,CAACM,MAAD,CAAnB;EACAC,KAAK,GAAGP,UAAU,CAACO,KAAD,CAAV,CAAkBQ,GAAlB,CAAsBC,SAAtB,CAAR;EACAP,KAAK,GAAGT,UAAU,CAACS,KAAD,CAAlB;EAEA,MAAMQ,KAAK,GAAG;IACZC,MAAM,EAAE,eADI;IAEZZ,MAAM,EAAEA,MAAM,CAACa,IAAP,CAAY,GAAZ,CAFI;IAGZZ,KAAK,EAAEA,KAAK,CAACY,IAAN,CAAW,GAAX,CAHK;IAIZT;EAJY,CAAd,CA3BmF,CAkCnF;;EACA,IAAIH,KAAK,CAACM,MAAN,KAAiB,CAAjB,IAAsBP,MAAM,CAACO,MAAP,KAAkB,CAA5C,EAA+C;IAC7CI,KAAK,CAACG,SAAN,GAAkB,IAAlB;EACD;;EAED,IAAIZ,SAAJ,EAAe;IACbA,SAAS,GAAGR,UAAU,CAACQ,SAAD,CAAV,CAAsBO,GAAtB,CAA0Bd,SAA1B,CAAZ;IACAgB,KAAK,CAACT,SAAN,GAAkBA,SAAS,CAACW,IAAV,CAAe,GAAf,CAAlB;EACD;;EAED,IAAIV,KAAK,IAAIA,KAAK,CAACI,MAAN,GAAe,CAA5B,EAA+BI,KAAK,CAACR,KAAN,GAAcA,KAAK,CAACU,IAAN,CAAW,GAAX,CAAd;EAE/B,IAAIR,SAAS,KAAK,KAAlB,EAAyBM,KAAK,CAACN,SAAN,GAAkB,IAAlB;EAEzB,OAAON,QAAQ,CAACY,KAAD,CAAf;AACD,CAjDD,C,CAmDA;;;AACA,MAAMD,SAAS,GAAGK,IAAI,IAAIA,IAAI,CAACR,MAAL,KAAgB,CAAhB,GAAqB,GAAEQ,IAAK,MAA5B,GAAoCA,IAA9D"},"metadata":{},"sourceType":"script"}