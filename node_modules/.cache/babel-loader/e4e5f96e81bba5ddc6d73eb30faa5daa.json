{"ast":null,"code":"// See https://www.wikidata.org/w/api.php?action=help&modules=query%2Bsearch\nconst {\n  isPlainObject\n} = require('../utils/utils');\n\nconst namespacePattern = /^\\d+[|\\d]*$/;\n\nmodule.exports = buildUrl => params => {\n  if (!isPlainObject(params)) {\n    throw new Error(`expected parameters to be passed as an object, got ${params} (${typeof params})`);\n  } // Accept sr parameters with or without prefix\n\n\n  for (const key in params) {\n    if (key.startsWith('sr')) {\n      const shortKey = key.replace(/^sr/, '');\n      if (params[shortKey] != null) throw new Error(`${shortKey} and ${key} are the same`);\n      params[shortKey] = params[key];\n    }\n  }\n\n  const {\n    search,\n    haswbstatement,\n    format = 'json',\n    limit,\n    offset,\n    profile,\n    sort\n  } = params;\n  let {\n    namespace,\n    prop\n  } = params;\n  if (!(search || haswbstatement)) throw new Error('missing \"search\" or \"haswbstatement\" parameter');\n  let srsearch = '';\n  if (search) srsearch += search;\n\n  if (haswbstatement) {\n    const statements = haswbstatement instanceof Array ? haswbstatement : [haswbstatement];\n\n    for (const statement of statements) {\n      if (statement[0] === '-') srsearch += ` -haswbstatement:${statement.slice(1)}`;else srsearch += ` haswbstatement:${statement}`;\n    }\n  }\n\n  if (limit != null && (typeof limit !== 'number' || limit < 1)) {\n    throw new Error(`invalid limit: ${limit}`);\n  }\n\n  if (offset != null && (typeof offset !== 'number' || offset < 0)) {\n    throw new Error(`invalid offset: ${offset}`);\n  }\n\n  if (namespace instanceof Array) namespace = namespace.join('|');else if (typeof namespace === 'number') namespace = namespace.toString();\n\n  if (namespace && !namespacePattern.test(namespace)) {\n    throw new Error(`invalid namespace: ${namespace}`);\n  }\n\n  if (profile != null && typeof profile !== 'string') {\n    throw new Error(`invalid profile: ${profile} (${typeof profile}, expected string)`);\n  }\n\n  if (sort != null && typeof sort !== 'string') {\n    throw new Error(`invalid sort: ${sort} (${typeof sort}, expected string)`);\n  }\n\n  if (prop != null) {\n    if (namespace instanceof Array) prop = prop.join('|');\n\n    if (typeof prop !== 'string') {\n      throw new Error(`invalid prop: ${prop} (${typeof prop}, expected string)`);\n    }\n  }\n\n  return buildUrl({\n    action: 'query',\n    list: 'search',\n    srsearch: srsearch.trim(),\n    format,\n    srnamespace: namespace,\n    srlimit: limit,\n    sroffset: offset,\n    srqiprofile: profile,\n    srsort: sort,\n    srprop: prop\n  });\n};","map":{"version":3,"names":["isPlainObject","require","namespacePattern","module","exports","buildUrl","params","Error","key","startsWith","shortKey","replace","search","haswbstatement","format","limit","offset","profile","sort","namespace","prop","srsearch","statements","Array","statement","slice","join","toString","test","action","list","trim","srnamespace","srlimit","sroffset","srqiprofile","srsort","srprop"],"sources":["/Users/aarongmduran/Desktop/tornados/tornados/node_modules/wikibase-sdk/lib/queries/cirrus_search.js"],"sourcesContent":["// See https://www.wikidata.org/w/api.php?action=help&modules=query%2Bsearch\n\nconst { isPlainObject } = require('../utils/utils')\nconst namespacePattern = /^\\d+[|\\d]*$/\n\nmodule.exports = buildUrl => params => {\n  if (!isPlainObject(params)) {\n    throw new Error(`expected parameters to be passed as an object, got ${params} (${typeof params})`)\n  }\n\n  // Accept sr parameters with or without prefix\n  for (const key in params) {\n    if (key.startsWith('sr')) {\n      const shortKey = key.replace(/^sr/, '')\n      if (params[shortKey] != null) throw new Error(`${shortKey} and ${key} are the same`)\n      params[shortKey] = params[key]\n    }\n  }\n\n  const { search, haswbstatement, format = 'json', limit, offset, profile, sort } = params\n  let { namespace, prop } = params\n\n  if (!(search || haswbstatement)) throw new Error('missing \"search\" or \"haswbstatement\" parameter')\n\n  let srsearch = ''\n  if (search) srsearch += search\n\n  if (haswbstatement) {\n    const statements = haswbstatement instanceof Array ? haswbstatement : [ haswbstatement ]\n    for (const statement of statements) {\n      if (statement[0] === '-') srsearch += ` -haswbstatement:${statement.slice(1)}`\n      else srsearch += ` haswbstatement:${statement}`\n    }\n  }\n\n  if (limit != null && (typeof limit !== 'number' || limit < 1)) {\n    throw new Error(`invalid limit: ${limit}`)\n  }\n\n  if (offset != null && (typeof offset !== 'number' || offset < 0)) {\n    throw new Error(`invalid offset: ${offset}`)\n  }\n\n  if (namespace instanceof Array) namespace = namespace.join('|')\n  else if (typeof namespace === 'number') namespace = namespace.toString()\n\n  if (namespace && !namespacePattern.test(namespace)) {\n    throw new Error(`invalid namespace: ${namespace}`)\n  }\n\n  if (profile != null && typeof profile !== 'string') {\n    throw new Error(`invalid profile: ${profile} (${typeof profile}, expected string)`)\n  }\n\n  if (sort != null && typeof sort !== 'string') {\n    throw new Error(`invalid sort: ${sort} (${typeof sort}, expected string)`)\n  }\n\n  if (prop != null) {\n    if (namespace instanceof Array) prop = prop.join('|')\n    if (typeof prop !== 'string') {\n      throw new Error(`invalid prop: ${prop} (${typeof prop}, expected string)`)\n    }\n  }\n\n  return buildUrl({\n    action: 'query',\n    list: 'search',\n    srsearch: srsearch.trim(),\n    format,\n    srnamespace: namespace,\n    srlimit: limit,\n    sroffset: offset,\n    srqiprofile: profile,\n    srsort: sort,\n    srprop: prop,\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}