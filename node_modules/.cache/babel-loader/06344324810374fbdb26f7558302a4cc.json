{"ast":null,"code":"module.exports = wikibaseTime => {\n  // Also accept claim datavalue.value objects\n  if (typeof wikibaseTime === 'object') {\n    wikibaseTime = wikibaseTime.time;\n  }\n\n  const sign = wikibaseTime[0];\n  let [yearMonthDay, withinDay] = wikibaseTime.slice(1).split('T'); // Wikidata generates invalid ISO dates to indicate precision\n  // ex: +1990-00-00T00:00:00Z to indicate 1990 with year precision\n\n  yearMonthDay = yearMonthDay.replace(/-00/g, '-01');\n  const rest = `${yearMonthDay}T${withinDay}`;\n  return fullDateData(sign, rest);\n};\n\nconst fullDateData = (sign, rest) => {\n  const year = rest.split('-')[0];\n  const needsExpandedYear = sign === '-' || year.length > 4;\n  return needsExpandedYear ? expandedYearDate(sign, rest, year) : new Date(rest);\n};\n\nconst expandedYearDate = (sign, rest, year) => {\n  let date; // Using ISO8601 expanded notation for negative years or positive\n  // years with more than 4 digits: adding up to 2 leading zeros\n  // when needed. Can't find the documentation again, but testing\n  // with `new Date(date)` gives a good clue of the implementation\n\n  if (year.length === 4) {\n    date = `${sign}00${rest}`;\n  } else if (year.length === 5) {\n    date = `${sign}0${rest}`;\n  } else {\n    date = sign + rest;\n  }\n\n  return new Date(date);\n};","map":{"version":3,"names":["module","exports","wikibaseTime","time","sign","yearMonthDay","withinDay","slice","split","replace","rest","fullDateData","year","needsExpandedYear","length","expandedYearDate","Date","date"],"sources":["/Users/aarongmduran/Desktop/tornados/tornados/node_modules/wikibase-sdk/lib/helpers/wikibase_time_to_date_object.js"],"sourcesContent":["module.exports = wikibaseTime => {\n  // Also accept claim datavalue.value objects\n  if (typeof wikibaseTime === 'object') {\n    wikibaseTime = wikibaseTime.time\n  }\n\n  const sign = wikibaseTime[0]\n  let [ yearMonthDay, withinDay ] = wikibaseTime.slice(1).split('T')\n\n  // Wikidata generates invalid ISO dates to indicate precision\n  // ex: +1990-00-00T00:00:00Z to indicate 1990 with year precision\n  yearMonthDay = yearMonthDay.replace(/-00/g, '-01')\n  const rest = `${yearMonthDay}T${withinDay}`\n\n  return fullDateData(sign, rest)\n}\n\nconst fullDateData = (sign, rest) => {\n  const year = rest.split('-')[0]\n  const needsExpandedYear = sign === '-' || year.length > 4\n\n  return needsExpandedYear ? expandedYearDate(sign, rest, year) : new Date(rest)\n}\n\nconst expandedYearDate = (sign, rest, year) => {\n  let date\n  // Using ISO8601 expanded notation for negative years or positive\n  // years with more than 4 digits: adding up to 2 leading zeros\n  // when needed. Can't find the documentation again, but testing\n  // with `new Date(date)` gives a good clue of the implementation\n  if (year.length === 4) {\n    date = `${sign}00${rest}`\n  } else if (year.length === 5) {\n    date = `${sign}0${rest}`\n  } else {\n    date = sign + rest\n  }\n  return new Date(date)\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,YAAY,IAAI;EAC/B;EACA,IAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;IACpCA,YAAY,GAAGA,YAAY,CAACC,IAA5B;EACD;;EAED,MAAMC,IAAI,GAAGF,YAAY,CAAC,CAAD,CAAzB;EACA,IAAI,CAAEG,YAAF,EAAgBC,SAAhB,IAA8BJ,YAAY,CAACK,KAAb,CAAmB,CAAnB,EAAsBC,KAAtB,CAA4B,GAA5B,CAAlC,CAP+B,CAS/B;EACA;;EACAH,YAAY,GAAGA,YAAY,CAACI,OAAb,CAAqB,MAArB,EAA6B,KAA7B,CAAf;EACA,MAAMC,IAAI,GAAI,GAAEL,YAAa,IAAGC,SAAU,EAA1C;EAEA,OAAOK,YAAY,CAACP,IAAD,EAAOM,IAAP,CAAnB;AACD,CAfD;;AAiBA,MAAMC,YAAY,GAAG,CAACP,IAAD,EAAOM,IAAP,KAAgB;EACnC,MAAME,IAAI,GAAGF,IAAI,CAACF,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAb;EACA,MAAMK,iBAAiB,GAAGT,IAAI,KAAK,GAAT,IAAgBQ,IAAI,CAACE,MAAL,GAAc,CAAxD;EAEA,OAAOD,iBAAiB,GAAGE,gBAAgB,CAACX,IAAD,EAAOM,IAAP,EAAaE,IAAb,CAAnB,GAAwC,IAAII,IAAJ,CAASN,IAAT,CAAhE;AACD,CALD;;AAOA,MAAMK,gBAAgB,GAAG,CAACX,IAAD,EAAOM,IAAP,EAAaE,IAAb,KAAsB;EAC7C,IAAIK,IAAJ,CAD6C,CAE7C;EACA;EACA;EACA;;EACA,IAAIL,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;IACrBG,IAAI,GAAI,GAAEb,IAAK,KAAIM,IAAK,EAAxB;EACD,CAFD,MAEO,IAAIE,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;IAC5BG,IAAI,GAAI,GAAEb,IAAK,IAAGM,IAAK,EAAvB;EACD,CAFM,MAEA;IACLO,IAAI,GAAGb,IAAI,GAAGM,IAAd;EACD;;EACD,OAAO,IAAIM,IAAJ,CAASC,IAAT,CAAP;AACD,CAdD"},"metadata":{},"sourceType":"script"}