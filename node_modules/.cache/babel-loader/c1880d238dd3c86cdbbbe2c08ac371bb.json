{"ast":null,"code":"const toDateObject = require('./wikibase_time_to_date_object');\n\nconst helpers = {};\n\nhelpers.isNumericId = id => /^[1-9][0-9]*$/.test(id);\n\nhelpers.isEntityId = id => /^((Q|P|L)[1-9][0-9]*|L[1-9][0-9]*-(F|S)[1-9][0-9]*)$/.test(id);\n\nhelpers.isEntitySchemaId = id => /^E[1-9][0-9]*$/.test(id);\n\nhelpers.isItemId = id => /^Q[1-9][0-9]*$/.test(id);\n\nhelpers.isPropertyId = id => /^P[1-9][0-9]*$/.test(id);\n\nhelpers.isLexemeId = id => /^L[1-9][0-9]*$/.test(id);\n\nhelpers.isFormId = id => /^L[1-9][0-9]*-F[1-9][0-9]*$/.test(id);\n\nhelpers.isSenseId = id => /^L[1-9][0-9]*-S[1-9][0-9]*$/.test(id);\n\nhelpers.isGuid = guid => /^((Q|P|L)[1-9][0-9]*|L[1-9][0-9]*-(F|S)[1-9][0-9]*)\\$[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(guid);\n\nhelpers.isHash = hash => /^[0-9a-f]{40}$/.test(hash);\n\nhelpers.isPropertyClaimsId = id => {\n  const [entityId, propertyId] = id.split('#');\n  return helpers.isEntityId(entityId) && helpers.isPropertyId(propertyId);\n};\n\nhelpers.isRevisionId = id => /^\\d+$/.test(id);\n\nhelpers.isEntityPageTitle = title => {\n  if (typeof title !== 'string') return false;\n  let [namespace, id] = title.split(':');\n\n  if (namespace && id) {\n    return isEntityNamespace(namespace) && helpers[`is${namespace}Id`](id);\n  } else {\n    id = namespace;\n    return helpers.isItemId(id);\n  }\n};\n\nconst entityNamespaces = ['Item', 'Property', 'Lexeme'];\n\nconst isEntityNamespace = str => entityNamespaces.includes(str);\n\nconst isNonNestedEntityId = id => /^(Q|P|L)[1-9][0-9]*$/.test(id);\n\nhelpers.getNumericId = id => {\n  if (!isNonNestedEntityId(id)) throw new Error(`invalid entity id: ${id}`);\n  return id.replace(/^(Q|P|L)/, '');\n};\n\nhelpers.wikibaseTimeToDateObject = toDateObject; // Try to parse the date or return the input\n\nconst bestEffort = fn => value => {\n  try {\n    return fn(value);\n  } catch (err) {\n    value = value.time || value;\n    const sign = value[0];\n    let [yearMonthDay, withinDay] = value.slice(1).split('T');\n    yearMonthDay = yearMonthDay.replace(/-00/g, '-01');\n    return `${sign}${yearMonthDay}T${withinDay}`;\n  }\n};\n\nconst toEpochTime = wikibaseTime => toDateObject(wikibaseTime).getTime();\n\nconst toISOString = wikibaseTime => toDateObject(wikibaseTime).toISOString(); // A date format that knows just three precisions:\n// 'yyyy', 'yyyy-mm', and 'yyyy-mm-dd' (including negative and non-4 digit years)\n// Should be able to handle the old and the new Wikidata time:\n// - in the old one, units below the precision where set to 00\n// - in the new one, those months and days are set to 01 in those cases,\n//   so when we can access the full claim object, we check the precision\n//   to recover the old format\n\n\nconst toSimpleDay = wikibaseTime => {\n  // Also accept claim datavalue.value objects, and actually prefer those,\n  // as we can check the precision\n  if (typeof wikibaseTime === 'object') {\n    const {\n      time,\n      precision\n    } = wikibaseTime; // Year precision\n\n    if (precision === 9) wikibaseTime = time.replace('-01-01T', '-00-00T'); // Month precision\n    else if (precision === 10) wikibaseTime = time.replace('-01T', '-00T');else wikibaseTime = time;\n  }\n\n  return wikibaseTime.split('T')[0] // Remove positive years sign\n  .replace(/^\\+/, '') // Remove years padding zeros\n  .replace(/^(-?)0+/, '$1') // Remove days if not included in the Wikidata date precision\n  .replace(/-00$/, '') // Remove months if not included in the Wikidata date precision\n  .replace(/-00$/, '');\n};\n\nhelpers.wikibaseTimeToEpochTime = bestEffort(toEpochTime);\nhelpers.wikibaseTimeToISOString = bestEffort(toISOString);\nhelpers.wikibaseTimeToSimpleDay = bestEffort(toSimpleDay);\n\nhelpers.getImageUrl = (filename, width) => {\n  let url = `https://commons.wikimedia.org/wiki/Special:FilePath/${filename}`;\n  if (typeof width === 'number') url += `?width=${width}`;\n  return url;\n};\n\nhelpers.getEntityIdFromGuid = guid => {\n  const parts = guid.split(/[$-]/);\n\n  if (parts.length === 6) {\n    // Examples:\n    // - q520$BCA8D9DE-B467-473B-943C-6FD0C5B3D02C\n    // - P6216-a7fd6230-496e-6b47-ca4a-dcec5dbd7f95\n    return parts[0].toUpperCase();\n  } else if (parts.length === 7) {\n    // Examples:\n    // - L525-S1$66D20252-8CEC-4DB1-8B00-D713CFF42E48\n    // - L525-F2-52c9b382-02f5-4413-9923-26ade74f5a0d\n    return parts.slice(0, 2).join('-').toUpperCase();\n  } else {\n    throw new Error(`invalid guid: ${guid}`);\n  }\n};\n\nmodule.exports = helpers;","map":{"version":3,"names":["toDateObject","require","helpers","isNumericId","id","test","isEntityId","isEntitySchemaId","isItemId","isPropertyId","isLexemeId","isFormId","isSenseId","isGuid","guid","isHash","hash","isPropertyClaimsId","entityId","propertyId","split","isRevisionId","isEntityPageTitle","title","namespace","isEntityNamespace","entityNamespaces","str","includes","isNonNestedEntityId","getNumericId","Error","replace","wikibaseTimeToDateObject","bestEffort","fn","value","err","time","sign","yearMonthDay","withinDay","slice","toEpochTime","wikibaseTime","getTime","toISOString","toSimpleDay","precision","wikibaseTimeToEpochTime","wikibaseTimeToISOString","wikibaseTimeToSimpleDay","getImageUrl","filename","width","url","getEntityIdFromGuid","parts","length","toUpperCase","join","module","exports"],"sources":["/Users/aarongmduran/Desktop/tornados/tornados/node_modules/wikibase-sdk/lib/helpers/helpers.js"],"sourcesContent":["const toDateObject = require('./wikibase_time_to_date_object')\n\nconst helpers = {}\nhelpers.isNumericId = id => /^[1-9][0-9]*$/.test(id)\nhelpers.isEntityId = id => /^((Q|P|L)[1-9][0-9]*|L[1-9][0-9]*-(F|S)[1-9][0-9]*)$/.test(id)\nhelpers.isEntitySchemaId = id => /^E[1-9][0-9]*$/.test(id)\nhelpers.isItemId = id => /^Q[1-9][0-9]*$/.test(id)\nhelpers.isPropertyId = id => /^P[1-9][0-9]*$/.test(id)\nhelpers.isLexemeId = id => /^L[1-9][0-9]*$/.test(id)\nhelpers.isFormId = id => /^L[1-9][0-9]*-F[1-9][0-9]*$/.test(id)\nhelpers.isSenseId = id => /^L[1-9][0-9]*-S[1-9][0-9]*$/.test(id)\nhelpers.isGuid = guid => /^((Q|P|L)[1-9][0-9]*|L[1-9][0-9]*-(F|S)[1-9][0-9]*)\\$[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(guid)\nhelpers.isHash = hash => /^[0-9a-f]{40}$/.test(hash)\nhelpers.isPropertyClaimsId = id => {\n  const [ entityId, propertyId ] = id.split('#')\n  return helpers.isEntityId(entityId) && helpers.isPropertyId(propertyId)\n}\nhelpers.isRevisionId = id => /^\\d+$/.test(id)\n\nhelpers.isEntityPageTitle = title => {\n  if (typeof title !== 'string') return false\n  let [ namespace, id ] = title.split(':')\n  if (namespace && id) {\n    return isEntityNamespace(namespace) && helpers[`is${namespace}Id`](id)\n  } else {\n    id = namespace\n    return helpers.isItemId(id)\n  }\n}\n\nconst entityNamespaces = [ 'Item', 'Property', 'Lexeme' ]\n\nconst isEntityNamespace = str => entityNamespaces.includes(str)\n\nconst isNonNestedEntityId = id => /^(Q|P|L)[1-9][0-9]*$/.test(id)\n\nhelpers.getNumericId = id => {\n  if (!isNonNestedEntityId(id)) throw new Error(`invalid entity id: ${id}`)\n  return id.replace(/^(Q|P|L)/, '')\n}\n\nhelpers.wikibaseTimeToDateObject = toDateObject\n\n// Try to parse the date or return the input\nconst bestEffort = fn => value => {\n  try {\n    return fn(value)\n  } catch (err) {\n    value = value.time || value\n\n    const sign = value[0]\n    let [ yearMonthDay, withinDay ] = value.slice(1).split('T')\n    yearMonthDay = yearMonthDay.replace(/-00/g, '-01')\n\n    return `${sign}${yearMonthDay}T${withinDay}`\n  }\n}\n\nconst toEpochTime = wikibaseTime => toDateObject(wikibaseTime).getTime()\nconst toISOString = wikibaseTime => toDateObject(wikibaseTime).toISOString()\n\n// A date format that knows just three precisions:\n// 'yyyy', 'yyyy-mm', and 'yyyy-mm-dd' (including negative and non-4 digit years)\n// Should be able to handle the old and the new Wikidata time:\n// - in the old one, units below the precision where set to 00\n// - in the new one, those months and days are set to 01 in those cases,\n//   so when we can access the full claim object, we check the precision\n//   to recover the old format\nconst toSimpleDay = wikibaseTime => {\n  // Also accept claim datavalue.value objects, and actually prefer those,\n  // as we can check the precision\n  if (typeof wikibaseTime === 'object') {\n    const { time, precision } = wikibaseTime\n    // Year precision\n    if (precision === 9) wikibaseTime = time.replace('-01-01T', '-00-00T')\n    // Month precision\n    else if (precision === 10) wikibaseTime = time.replace('-01T', '-00T')\n    else wikibaseTime = time\n  }\n\n  return wikibaseTime.split('T')[0]\n  // Remove positive years sign\n  .replace(/^\\+/, '')\n  // Remove years padding zeros\n  .replace(/^(-?)0+/, '$1')\n  // Remove days if not included in the Wikidata date precision\n  .replace(/-00$/, '')\n  // Remove months if not included in the Wikidata date precision\n  .replace(/-00$/, '')\n}\n\nhelpers.wikibaseTimeToEpochTime = bestEffort(toEpochTime)\nhelpers.wikibaseTimeToISOString = bestEffort(toISOString)\nhelpers.wikibaseTimeToSimpleDay = bestEffort(toSimpleDay)\n\nhelpers.getImageUrl = (filename, width) => {\n  let url = `https://commons.wikimedia.org/wiki/Special:FilePath/${filename}`\n  if (typeof width === 'number') url += `?width=${width}`\n  return url\n}\n\nhelpers.getEntityIdFromGuid = guid => {\n  const parts = guid.split(/[$-]/)\n  if (parts.length === 6) {\n    // Examples:\n    // - q520$BCA8D9DE-B467-473B-943C-6FD0C5B3D02C\n    // - P6216-a7fd6230-496e-6b47-ca4a-dcec5dbd7f95\n    return parts[0].toUpperCase()\n  } else if (parts.length === 7) {\n    // Examples:\n    // - L525-S1$66D20252-8CEC-4DB1-8B00-D713CFF42E48\n    // - L525-F2-52c9b382-02f5-4413-9923-26ade74f5a0d\n    return parts.slice(0, 2).join('-').toUpperCase()\n  } else {\n    throw new Error(`invalid guid: ${guid}`)\n  }\n}\n\nmodule.exports = helpers\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}