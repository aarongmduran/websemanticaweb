{"ast":null,"code":"module.exports = function (input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof input === 'string') input = JSON.parse(input);\n  const {\n    vars\n  } = input.head;\n  const results = input.results.bindings;\n\n  if (vars.length === 1 && options.minimize === true) {\n    const varName = vars[0];\n    return results.map(result => parseValue(result[varName])) // filtering-out bnodes\n    .filter(result => result != null);\n  }\n\n  const {\n    richVars,\n    associatedVars,\n    standaloneVars\n  } = identifyVars(vars);\n  return results.map(getSimplifiedResult(richVars, associatedVars, standaloneVars));\n};\n\nconst parseValue = valueObj => {\n  if (!valueObj) return;\n  let {\n    datatype\n  } = valueObj;\n  datatype = datatype && datatype.replace('http://www.w3.org/2001/XMLSchema#', '');\n  const parser = parsers[valueObj.type] || getDatatypesParsers(datatype);\n  return parser(valueObj);\n};\n\nconst parsers = {\n  uri: valueObj => parseUri(valueObj.value),\n  // blank nodes will be filtered-out in order to get things simple\n  bnode: () => null\n};\n\nconst numberParser = valueObj => parseFloat(valueObj.value);\n\nconst getDatatypesParsers = datatype => {\n  datatype = datatype && datatype.replace('http://www.w3.org/2001/XMLSchema#', '');\n  return datatypesParsers[datatype] || passValue;\n};\n\nconst datatypesParsers = {\n  decimal: numberParser,\n  integer: numberParser,\n  float: numberParser,\n  double: numberParser,\n  boolean: valueObj => valueObj.value === 'true'\n}; // return the raw value if the datatype is missing\n\nconst passValue = valueObj => valueObj.value;\n\nconst parseUri = uri => {\n  // ex: http://www.wikidata.org/entity/statement/\n  if (uri.match(/http.*\\/entity\\/statement\\//)) {\n    return convertStatementUriToGuid(uri);\n  }\n\n  return uri // ex: http://www.wikidata.org/entity/\n  .replace(/^https?:\\/\\/.*\\/entity\\//, '') // ex: http://www.wikidata.org/prop/direct/\n  .replace(/^https?:\\/\\/.*\\/prop\\/direct\\//, '');\n};\n\nconst convertStatementUriToGuid = uri => {\n  // ex: http://www.wikidata.org/entity/statement/\n  uri = uri.replace(/^https?:\\/\\/.*\\/entity\\/statement\\//, '');\n  const parts = uri.split('-');\n  return parts[0] + '$' + parts.slice(1).join('-');\n};\n\nconst identifyVars = vars => {\n  let richVars = vars.filter(varName => vars.some(isAssociatedVar(varName)));\n  richVars = richVars.filter(richVar => {\n    return !richVars.some(otherRichVar => {\n      return richVar !== otherRichVar && richVar.startsWith(otherRichVar);\n    });\n  });\n  const associatedVarPattern = new RegExp(`^(${richVars.join('|')})[A-Z]`);\n  const associatedVars = vars.filter(varName => associatedVarPattern.test(varName));\n  const standaloneVars = vars.filter(varName => {\n    return !richVars.includes(varName) && !associatedVarPattern.test(varName);\n  });\n  return {\n    richVars,\n    associatedVars,\n    standaloneVars\n  };\n};\n\nconst isAssociatedVar = varNameA => {\n  const pattern = new RegExp(`^${varNameA}[A-Z]\\\\w+`);\n  return pattern.test.bind(pattern);\n};\n\nconst getSimplifiedResult = (richVars, associatedVars, standaloneVars) => result => {\n  const simplifiedResult = {};\n\n  for (const varName of richVars) {\n    const richVarData = {};\n    const value = parseValue(result[varName]);\n    if (value != null) richVarData.value = value;\n\n    for (const associatedVarName of associatedVars) {\n      if (associatedVarName.startsWith(varName)) addAssociatedValue(result, varName, associatedVarName, richVarData);\n    }\n\n    if (Object.keys(richVarData).length > 0) simplifiedResult[varName] = richVarData;\n  }\n\n  for (const varName of standaloneVars) {\n    simplifiedResult[varName] = parseValue(result[varName]);\n  }\n\n  return simplifiedResult;\n};\n\nconst addAssociatedValue = (result, varName, associatedVarName, richVarData) => {\n  // ex: propertyType => Type\n  let shortAssociatedVarName = associatedVarName.split(varName)[1]; // ex: Type => type\n\n  shortAssociatedVarName = shortAssociatedVarName[0].toLowerCase() + shortAssociatedVarName.slice(1); // ex: altLabel => aliases\n\n  shortAssociatedVarName = specialNames[shortAssociatedVarName] || shortAssociatedVarName;\n  const associatedVarData = result[associatedVarName];\n  if (associatedVarData != null) richVarData[shortAssociatedVarName] = associatedVarData.value;\n};\n\nconst specialNames = {\n  altLabel: 'aliases'\n};","map":{"version":3,"names":["module","exports","input","options","JSON","parse","vars","head","results","bindings","length","minimize","varName","map","result","parseValue","filter","richVars","associatedVars","standaloneVars","identifyVars","getSimplifiedResult","valueObj","datatype","replace","parser","parsers","type","getDatatypesParsers","uri","parseUri","value","bnode","numberParser","parseFloat","datatypesParsers","passValue","decimal","integer","float","double","boolean","match","convertStatementUriToGuid","parts","split","slice","join","some","isAssociatedVar","richVar","otherRichVar","startsWith","associatedVarPattern","RegExp","test","includes","varNameA","pattern","bind","simplifiedResult","richVarData","associatedVarName","addAssociatedValue","Object","keys","shortAssociatedVarName","toLowerCase","specialNames","associatedVarData","altLabel"],"sources":["/Users/aarongmduran/Desktop/tornados/tornados/node_modules/wikibase-sdk/lib/helpers/simplify_sparql_results.js"],"sourcesContent":["module.exports = (input, options = {}) => {\n  if (typeof input === 'string') input = JSON.parse(input)\n\n  const { vars } = input.head\n  const results = input.results.bindings\n\n  if (vars.length === 1 && options.minimize === true) {\n    const varName = vars[0]\n    return results\n    .map(result => parseValue(result[varName]))\n    // filtering-out bnodes\n    .filter(result => result != null)\n  }\n\n  const { richVars, associatedVars, standaloneVars } = identifyVars(vars)\n  return results.map(getSimplifiedResult(richVars, associatedVars, standaloneVars))\n}\n\nconst parseValue = valueObj => {\n  if (!(valueObj)) return\n  let { datatype } = valueObj\n  datatype = datatype && datatype.replace('http://www.w3.org/2001/XMLSchema#', '')\n  const parser = parsers[valueObj.type] || getDatatypesParsers(datatype)\n  return parser(valueObj)\n}\n\nconst parsers = {\n  uri: valueObj => parseUri(valueObj.value),\n  // blank nodes will be filtered-out in order to get things simple\n  bnode: () => null\n}\n\nconst numberParser = valueObj => parseFloat(valueObj.value)\n\nconst getDatatypesParsers = datatype => {\n  datatype = datatype && datatype.replace('http://www.w3.org/2001/XMLSchema#', '')\n  return datatypesParsers[datatype] || passValue\n}\n\nconst datatypesParsers = {\n  decimal: numberParser,\n  integer: numberParser,\n  float: numberParser,\n  double: numberParser,\n  boolean: valueObj => valueObj.value === 'true'\n}\n\n// return the raw value if the datatype is missing\nconst passValue = valueObj => valueObj.value\n\nconst parseUri = uri => {\n  // ex: http://www.wikidata.org/entity/statement/\n  if (uri.match(/http.*\\/entity\\/statement\\//)) {\n    return convertStatementUriToGuid(uri)\n  }\n\n  return uri\n  // ex: http://www.wikidata.org/entity/\n  .replace(/^https?:\\/\\/.*\\/entity\\//, '')\n  // ex: http://www.wikidata.org/prop/direct/\n  .replace(/^https?:\\/\\/.*\\/prop\\/direct\\//, '')\n}\n\nconst convertStatementUriToGuid = uri => {\n  // ex: http://www.wikidata.org/entity/statement/\n  uri = uri.replace(/^https?:\\/\\/.*\\/entity\\/statement\\//, '')\n  const parts = uri.split('-')\n  return parts[0] + '$' + parts.slice(1).join('-')\n}\n\nconst identifyVars = vars => {\n  let richVars = vars.filter(varName => vars.some(isAssociatedVar(varName)))\n  richVars = richVars.filter(richVar => {\n    return !richVars.some(otherRichVar => {\n      return richVar !== otherRichVar && richVar.startsWith(otherRichVar)\n    })\n  })\n  const associatedVarPattern = new RegExp(`^(${richVars.join('|')})[A-Z]`)\n  const associatedVars = vars.filter(varName => associatedVarPattern.test(varName))\n  const standaloneVars = vars.filter(varName => {\n    return !richVars.includes(varName) && !associatedVarPattern.test(varName)\n  })\n  return { richVars, associatedVars, standaloneVars }\n}\n\nconst isAssociatedVar = varNameA => {\n  const pattern = new RegExp(`^${varNameA}[A-Z]\\\\w+`)\n  return pattern.test.bind(pattern)\n}\n\nconst getSimplifiedResult = (richVars, associatedVars, standaloneVars) => result => {\n  const simplifiedResult = {}\n  for (const varName of richVars) {\n    const richVarData = {}\n    const value = parseValue(result[varName])\n    if (value != null) richVarData.value = value\n    for (const associatedVarName of associatedVars) {\n      if (associatedVarName.startsWith(varName)) addAssociatedValue(result, varName, associatedVarName, richVarData)\n    }\n    if (Object.keys(richVarData).length > 0) simplifiedResult[varName] = richVarData\n  }\n  for (const varName of standaloneVars) {\n    simplifiedResult[varName] = parseValue(result[varName])\n  }\n  return simplifiedResult\n}\n\nconst addAssociatedValue = (result, varName, associatedVarName, richVarData) => {\n  // ex: propertyType => Type\n  let shortAssociatedVarName = associatedVarName.split(varName)[1]\n  // ex: Type => type\n  shortAssociatedVarName = shortAssociatedVarName[0].toLowerCase() + shortAssociatedVarName.slice(1)\n  // ex: altLabel => aliases\n  shortAssociatedVarName = specialNames[shortAssociatedVarName] || shortAssociatedVarName\n  const associatedVarData = result[associatedVarName]\n  if (associatedVarData != null) richVarData[shortAssociatedVarName] = associatedVarData.value\n}\n\nconst specialNames = {\n  altLabel: 'aliases'\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}