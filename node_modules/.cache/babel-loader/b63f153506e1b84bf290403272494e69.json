{"ast":null,"code":"const {\n  isPlainObject\n} = require('./utils/utils');\n\nconst simplify = require('./helpers/simplify');\n\nconst parse = require('./helpers/parse_responses');\n\nconst helpers = require('./helpers/helpers');\n\nconst sitelinksHelpers = require('../lib/helpers/sitelinks');\n\nconst rankHelpers = require('../lib/helpers/rank');\n\nconst tip = `Tip: if you just want to access functions that don't need an instance or a sparqlEndpoint,\nthose are also exposed directly on the module object. Exemple:\nconst { isItemId, simplify } = require('wikibase-sdk')`;\nconst common = Object.assign({\n  simplify,\n  parse\n}, helpers, sitelinksHelpers, rankHelpers);\n\nconst WBK = config => {\n  if (!isPlainObject(config)) throw new Error('invalid config');\n  const {\n    instance,\n    sparqlEndpoint\n  } = config;\n  let {\n    wgScriptPath = 'w'\n  } = config;\n  wgScriptPath = wgScriptPath.replace(/^\\//, '');\n\n  if (!(instance || sparqlEndpoint)) {\n    throw new Error(`one of instance or sparqlEndpoint should be set at initialization.\\n${tip}`);\n  }\n\n  let wikibaseApiFunctions, instanceRoot, instanceApiEndpoint;\n\n  if (instance) {\n    validateEndpoint('instance', instance);\n    instanceRoot = instance.replace(/\\/$/, '').replace(`/${wgScriptPath}/api.php`, '');\n    instanceApiEndpoint = `${instanceRoot}/${wgScriptPath}/api.php`;\n\n    const buildUrl = require('./utils/build_url')(instanceApiEndpoint);\n\n    wikibaseApiFunctions = {\n      searchEntities: require('./queries/search_entities')(buildUrl),\n      cirrusSearchPages: require('./queries/cirrus_search')(buildUrl),\n      getEntities: require('./queries/get_entities')(buildUrl),\n      getManyEntities: require('./queries/get_many_entities')(buildUrl),\n      getRevisions: require('./queries/get_revisions')(buildUrl),\n      getEntityRevision: require('./queries/get_entity_revision')(instance, wgScriptPath),\n      getEntitiesFromSitelinks: require('./queries/get_entities_from_sitelinks')(buildUrl)\n    };\n  } else {\n    wikibaseApiFunctions = {\n      searchEntities: missingInstance('searchEntities'),\n      cirrusSearchPages: missingInstance('cirrusSearchPages'),\n      getEntities: missingInstance('getEntities'),\n      getManyEntities: missingInstance('getManyEntities'),\n      getRevisions: missingInstance('getRevisions'),\n      getEntityRevision: missingInstance('getEntityRevision'),\n      getEntitiesFromSitelinks: missingInstance('getEntitiesFromSitelinks')\n    };\n  }\n\n  let wikibaseQueryServiceFunctions;\n\n  if (sparqlEndpoint) {\n    validateEndpoint('sparqlEndpoint', sparqlEndpoint);\n    wikibaseQueryServiceFunctions = {\n      sparqlQuery: require('./queries/sparql_query')(sparqlEndpoint),\n      getReverseClaims: require('./queries/get_reverse_claims')(sparqlEndpoint)\n    };\n  } else {\n    wikibaseQueryServiceFunctions = {\n      sparqlQuery: missingSparqlEndpoint('sparqlQuery'),\n      getReverseClaims: missingSparqlEndpoint('getReverseClaims')\n    };\n  }\n\n  const parsedData = {\n    instance: {\n      root: instanceRoot,\n      apiEndpoint: instanceApiEndpoint\n    }\n  };\n  return Object.assign(parsedData, common, wikibaseApiFunctions, wikibaseQueryServiceFunctions);\n}; // Make heplpers that don't require an instance to be specified available\n// directly on the exported function object\n\n\nObject.assign(WBK, common);\n\nconst validateEndpoint = (name, url) => {\n  if (!(typeof url === 'string' && url.startsWith('http'))) {\n    throw new Error(`invalid ${name}: ${url}`);\n  }\n};\n\nconst missingConfig = missingParameter => name => () => {\n  throw new Error(`${name} requires ${missingParameter} to be set at initialization`);\n};\n\nconst missingSparqlEndpoint = missingConfig('a sparqlEndpoint');\nconst missingInstance = missingConfig('an instance');\nmodule.exports = WBK;","map":{"version":3,"names":["isPlainObject","require","simplify","parse","helpers","sitelinksHelpers","rankHelpers","tip","common","Object","assign","WBK","config","Error","instance","sparqlEndpoint","wgScriptPath","replace","wikibaseApiFunctions","instanceRoot","instanceApiEndpoint","validateEndpoint","buildUrl","searchEntities","cirrusSearchPages","getEntities","getManyEntities","getRevisions","getEntityRevision","getEntitiesFromSitelinks","missingInstance","wikibaseQueryServiceFunctions","sparqlQuery","getReverseClaims","missingSparqlEndpoint","parsedData","root","apiEndpoint","name","url","startsWith","missingConfig","missingParameter","module","exports"],"sources":["/Users/aarongmduran/Desktop/tornados/tornados/node_modules/wikibase-sdk/lib/wikibase-sdk.js"],"sourcesContent":["const { isPlainObject } = require('./utils/utils')\n\nconst simplify = require('./helpers/simplify')\nconst parse = require('./helpers/parse_responses')\nconst helpers = require('./helpers/helpers')\nconst sitelinksHelpers = require('../lib/helpers/sitelinks')\nconst rankHelpers = require('../lib/helpers/rank')\nconst tip = `Tip: if you just want to access functions that don't need an instance or a sparqlEndpoint,\nthose are also exposed directly on the module object. Exemple:\nconst { isItemId, simplify } = require('wikibase-sdk')`\n\nconst common = Object.assign({ simplify, parse }, helpers, sitelinksHelpers, rankHelpers)\n\nconst WBK = config => {\n  if (!isPlainObject(config)) throw new Error('invalid config')\n  const { instance, sparqlEndpoint } = config\n  let { wgScriptPath = 'w' } = config\n\n  wgScriptPath = wgScriptPath.replace(/^\\//, '')\n\n  if (!(instance || sparqlEndpoint)) {\n    throw new Error(`one of instance or sparqlEndpoint should be set at initialization.\\n${tip}`)\n  }\n\n  let wikibaseApiFunctions, instanceRoot, instanceApiEndpoint\n  if (instance) {\n    validateEndpoint('instance', instance)\n\n    instanceRoot = instance\n      .replace(/\\/$/, '')\n      .replace(`/${wgScriptPath}/api.php`, '')\n\n    instanceApiEndpoint = `${instanceRoot}/${wgScriptPath}/api.php`\n\n    const buildUrl = require('./utils/build_url')(instanceApiEndpoint)\n\n    wikibaseApiFunctions = {\n      searchEntities: require('./queries/search_entities')(buildUrl),\n      cirrusSearchPages: require('./queries/cirrus_search')(buildUrl),\n      getEntities: require('./queries/get_entities')(buildUrl),\n      getManyEntities: require('./queries/get_many_entities')(buildUrl),\n      getRevisions: require('./queries/get_revisions')(buildUrl),\n      getEntityRevision: require('./queries/get_entity_revision')(instance, wgScriptPath),\n      getEntitiesFromSitelinks: require('./queries/get_entities_from_sitelinks')(buildUrl)\n    }\n  } else {\n    wikibaseApiFunctions = {\n      searchEntities: missingInstance('searchEntities'),\n      cirrusSearchPages: missingInstance('cirrusSearchPages'),\n      getEntities: missingInstance('getEntities'),\n      getManyEntities: missingInstance('getManyEntities'),\n      getRevisions: missingInstance('getRevisions'),\n      getEntityRevision: missingInstance('getEntityRevision'),\n      getEntitiesFromSitelinks: missingInstance('getEntitiesFromSitelinks')\n    }\n  }\n\n  let wikibaseQueryServiceFunctions\n  if (sparqlEndpoint) {\n    validateEndpoint('sparqlEndpoint', sparqlEndpoint)\n    wikibaseQueryServiceFunctions = {\n      sparqlQuery: require('./queries/sparql_query')(sparqlEndpoint),\n      getReverseClaims: require('./queries/get_reverse_claims')(sparqlEndpoint)\n    }\n  } else {\n    wikibaseQueryServiceFunctions = {\n      sparqlQuery: missingSparqlEndpoint('sparqlQuery'),\n      getReverseClaims: missingSparqlEndpoint('getReverseClaims')\n    }\n  }\n\n  const parsedData = {\n    instance: {\n      root: instanceRoot,\n      apiEndpoint: instanceApiEndpoint\n    }\n  }\n\n  return Object.assign(parsedData, common, wikibaseApiFunctions, wikibaseQueryServiceFunctions)\n}\n\n// Make heplpers that don't require an instance to be specified available\n// directly on the exported function object\nObject.assign(WBK, common)\n\nconst validateEndpoint = (name, url) => {\n  if (!(typeof url === 'string' && url.startsWith('http'))) {\n    throw new Error(`invalid ${name}: ${url}`)\n  }\n}\n\nconst missingConfig = missingParameter => name => () => {\n  throw new Error(`${name} requires ${missingParameter} to be set at initialization`)\n}\n\nconst missingSparqlEndpoint = missingConfig('a sparqlEndpoint')\nconst missingInstance = missingConfig('an instance')\n\nmodule.exports = WBK\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}